plot(x,z ,pch = 14)
plot(x,z ,pch = 1)
plot(x,z ,pch = 17)
plot(x,z ,pch = 12)
# Points
par(mfcol = c(1,1))
# ---------------------------------------------------------
# Base Plotting Systems in R
# ---------------------------------------------------------
# Screen, fiule?
# How the plot will be used ? tmp screen, web, paper, pres
# resize dynamically? vector format vs bitmap format
# Quel system ? : base, lattice, ggplot2 (ne peuvent pas etre melanges)
# Base : 2 D, 2 phases: initialize, Annotating
# plot(x,y), hist(x) ... launch graph device... draw in that device
par(mfrow = c(1,1), mar = c(5.1,4.1,4.1,2.1)) #  initialiser
library(datasets)
str(airquality)
hist(airquality$Ozone)
with(airquality, plot(Wind, Ozone))
airquality <- transform(airquality, Month = factor(Month))
boxplot(Ozone ~ Month, airquality, xlab = "Month", ylab = "Ozone (ppb)" )
boxplot(Ozone ~ Month, airquality, xlab = "Month", ylab = "Ozone (ppb)" ,col = "steelblue")
# pch : plotting symbol (default open circle)
# lty : line type  (default solid)
# lwd : line width specified as an interger multiple
boxplot(Ozone ~ Month, airquality, xlab = "Month", ylab = "Ozone (ppb)" ,col = "steelblue", pch = 1)
boxplot(Ozone ~ Month, airquality, xlab = "Month", ylab = "Ozone (ppb)" ,col = "steelblue", pch = 1)
boxplot(Ozone ~ Month, airquality, xlab = "Month", ylab = "Ozone (ppb)" ,col = "steelblue", pch = 10)
boxplot(Ozone ~ Month, airquality, xlab = "Month", ylab = "Ozone (ppb)" ,col = "steelblue", pch = 19)
# See default values :
par("lty")
par("col")
par("pch")
par("lwd")
par("xlab")
par("las")
par("bg")
par("mar")  # bottom left top righ
par("oma")
par("mfrow")
par("cfrow")
# Base Plotting Functions :
# plot(),
# lines() vector x vector y connects dots
# points(),
# text(), pos x,y
# title(),
# mtext(),
# axis()
library(datasets)
with(airquality, plot(Wind, Ozone))
title(main = "Ozone and Wind in New York City")
with(subset(airquality, Month == 5), points(Wind, Ozone, col = "blue"))
with(airquality, plot(Wind, Ozone, main = "Ozone and Wind ....NY", type = "n")) # set up sans plotter
with(subset(airquality, Month == 5), points(Wind, Ozone, col = "blue"))
with(subset(airquality, Month != 5), points(Wind, Ozone, col = "red"))
legend("topright", pch = 1, col = c("blue","red"), legend = c("May","Other months"))
with(airquality, plot(Wind, Ozone, main = "Ozone and Wind in NY", pch = 20))
model <- lm(Ozone ~ Wind, airquality)
abline(model, lwd = 2)
with(cars, plot(dist,speed))
model2 <- lm(speed ~ dist, cars)
abline(model2, lwd = 2, lty = 2, col = "red")
par(mfrow = c(1,2))
with(airquality, {
plot(Wind, Ozone, main = "Ozone and Wind")
plot(Solar.R, Ozone, main = "Ozone and sollar radiation")
})
par(mfrow = c(1,3), mar = c(4,4,2,1), oma = c(0,0,2,0))
with(airquality, {
plot(Wind, Ozone, main = "Ozone and Wind")
plot(Solar.R, Ozone, main = "Ozone and sollar radiation")
plot(Temp, Ozone, main = "Ozone and Temp")
mtext("xxx in NY", outer = TRUE)
})
# Demonstration
par(mfrow = c(1,1))
x <- rnorm(100)
hist(x)
y <- rnorm(100)
plot(x,y)
par("mar")
par(mar = c(2,2,0,0))
plot(x,y)
par(mar = c(5,4,2,2))
plot(x,y)
plot(x,y, pch = 20)
plot(x,y, pch = 19)
plot(x,y, pch = 2)
plot(x,y, pch = 3)
plot(x,y, pch = 4)
# Appendre les param :
example(points)
x <- rnorm(100)
y <- rnorm(100)
plot(x,y, pch = 24, col = "red", bg = "blue") # Boundary and fill param col & bg
title("Scatterplot")
text(-2,-2, "label")
legend("topleft", legend = "DATA")
legend("topright", legend = "DATA", pch = 20)
fit <- lm(y ~ x )
abline(fit, col = "red", lty = 2)
abline(fit, lwd = 3, col = "red", lty = 2)
abline(fit, lwd = 3, col = "blue")
plot(x, y, xlab = "Weight", ylab = "Height", main = "TITRE", pch =20)
legend("topright", legend = "DATA LEGEND", pch = 20)
fit <- lm(y ~ x )
abline(fit, lwd = 3, col = "red")
z <- rpois(100,2)
par(mfrow = c(2,1))
plot(x,y,pch = 20)
plot(x,z ,pch = 19)
par("mar")
par(mar = c(2,2,1,1))
plot(x,y,pch = 20)
plot(x,z ,pch = 19)
par(mfrow = c(1,2))
plot(x,y,pch = 20)
plot(x,z ,pch = 19)
par(mfrow = c(2,3))
plot(x,y,pch = 20)
plot(x,z ,pch = 19)
plot(x,z ,pch = 14)
plot(x,z ,pch = 1)
plot(x,z ,pch = 17)
plot(x,z ,pch = 12)
par(mfcol = c(2,3)) # change l'ordre d'affichage par col...
plot(x,y,pch = 20)
plot(x,z ,pch = 19)
plot(x,z ,pch = 14)
plot(x,z ,pch = 1)
plot(x,z ,pch = 17)
plot(x,z ,pch = 12)
# Points
par(mfcol = c(1,1))
x <- rnorm(100)
y <- x + rnorm(100)
g <- gl(2,50)
g <- gl(2,50, labels = c("Male","Female"))
g
str(g)
plot(x,y)
plot(x,y, type = "n")
points(x[g == "Male"], y[g == "Male"], col = "green")
points(x[g == "Female"], y[g=="Female"], col = "blue", pch = 19)
# ----------------------------------------------------------
# Graphics Devices in R
# ----------------------------------------------------------
# Window
# PDF file, PNG or JPEG file
# SVG
# on Mac quartz()
?Devices
library(datasets)
with(faithful, plot(eruptions, waiting))
str(faithful)
with(faithful, plot(eruptions, waiting))
title(main = " Old xxxxx")
pdf(file = "myplot.pdf")  ## Open PDF device; create myplot.pdf in wd
dev.off() ## Close the PDF file devioce
pdf(file = "myplot.pdf")  ## Open PDF device; create myplot.pdf in wd
with(faithful, plot(eruptions, waiting))
title(main = " Old xxxxx")
dev.off() ## Close the PDF file devioce
pdf(file = "myplot.pdf")  ## Open PDF device; create myplot.pdf in wd
with(faithful, plot(eruptions, waiting))
title(main = " Old xxxxx")
dev.off() ## Close the PDF file devioce
png(file = "myplot.png")  ## Open PDF device; create myplot.pdf in wd
with(faithful, plot(eruptions, waiting))
title(main = " Old xxxxx")
dev.off() ## Close the png file devioce
# Vector formats:
# pdf
# svg
# win.metafile
# postscript
# Bitmapformat
# png : portable network graphics
# jpeg : goog for photo, natural scenes
# tiff
# bmp
# Multiple Open Graphics Devices
dev.cur()
quartz()
dev.cur() # active device
# dev.set(<interger>) >2..
quartz()
quartz()
quartz()
quartz()
i<- dev.cur()
i
dev.set(6)
with(faithful, plot(eruptions, waiting))
title(main = " Old xx6xxx")
dev.set(3)
with(faithful, plot(eruptions, waiting))
title(main = " Old xxx3xx")
dev.set(6)
dev.off()
dev.set(4)
with(faithful, plot(eruptions, waiting))
title(main = " Old xx4xx4x")
dev.off()
dev.off()
dev.off()
dev.off()
# Copying Plots
# dev.copy
# dev.copy2pdf copy a plot to a PDF file
library(datasets)
with(faithful, plot(eruptions, waiting))
title(main = " Old xxxxx")
dev.copy(png, file = "graph_with_dev_copy.png")
dev.off()
library(datasets)
with(faithful, plot(eruptions, waiting))
title(main = " Old xxxxx")
dev.copy(png, file = "myplot_with_dev_copy.png")
dev.off()
# Noter que les deux fichiers ne sont pas exactement lñes mêmes.... copie est moi pure...
# ----------------------------------------------------------
# Week 2
# ----------------------------------------------------------
# ----------------------------------------------------------
# Lattice usefull for high dimenstional data / many plots
# xyplot, bwplot, levelplot & con, histogram, stripplot, dotplot, splom
# single function call to plot and annotation
# ----------------------------------------------------------
library(lattice)
# xyplot(y ~ x | f * g , data) formula notation : axe y ~ axe x | conditioning variables
# 2 eme arg data frame
library(datasets)
summary(airquality)
str(airquality)
summary(airquality)
xyplot(Ozone ~ Wind, data = airquality)
class(xyplot(Ozone ~ Wind, data = airquality))
o <- xyplot(Ozone ~ Wind, data = airquality)
print(o)
# Conversion du mois en valiable catégorielle (factor)
airquality <- transform(airquality, Month = factor(Month))
xyplot(Ozone ~ Wind | Month, data = airquality, layout = c(5,1))
# une seule ligne au lieu de plusieurs en Basis R...
# en fait objet of class trellis puis print graphicdevice
# auto printing....
p <- xyplot(Ozone ~ Wind, data = airquality)
print(p)
# Lattice Panel Functions
set.seed(10)
x <- rnorm(100)
f <- rep(0:1, each = 50)
f
y <- x + f - f * x + rnorm(100, sd = 0.5)
f <- factor(f, labels = c("group 1", "group 2"))
f
xyplot ( y ~ x | f, layout = c(2,1))
set.seed(10)
x <- rnorm(100)
f <- rep(0:1, each = 50)
f
y <- x + f - f * x + rnorm(100, sd = 0.5)
f <- factor(f, labels = c("group 1", "group 2"))
f
xyplot ( y ~ x | f, layout = c(2,1))
xyplot ( y ~ x | f, layout = c(2,1))
xyplot ( y ~ x | f, panel = function(x,y,...) {
panel.xyplot(x,y,...)
panel.abline(h = median(y), lty = 2)
})
xyplot ( y ~ x | f, panel = function(x,y,...) {
panel.xyplot(x,y,...)
panel.lmline(x,y, clo = 2)
})
?xyplot()
# Many panel possible... ex 150 Baltimor allergenes...
#----------------------------------------------------
# ggplot2
#----------------------------------------------------
Grammar of Graphics by Leland Wilkinson
library(ggplot2)
# data doivent venir d'un data.frame
# qplot() / ggplot
str(mpg)
?mpg
str(mpg)
qplot(displ,hwy, data = mpg)
# add factor couleur
qplot(displ,hwy, data = mpg, color = drv)
# Add statistic
qplot(displ,hwy, data = mpg, geom = c("point","smooth"))
# Histogram avec 1 seule var
qplot(hwy, data = mpg)
qplot(hwy, data = mpg, fill = drv)
# Facets (equiv aux panels de lattice )
qplot(displ,hwy, data = mpg, facets =.~drv )
qplot(hwy, data = mpg, facets =.~drv , binwidth = 2)
qplot(hwy, data = mpg, facets =drv~. , binwidth = 2)
qplot(hwy, data = mpg, facets =drv~fl , binwidth = 2)
qplot(hwy, data = mpg, facets =drv~fl , binwidth = 2,color = class )
qplot(hwy, displ, data = mpg, facets =drv~. , binwidth = 2,color = class )
# str(maacs) not available
# qplot(log(eno), data=maacs)
# qplot(log(eno), data=maacs, fill = mopos)
# str(maacs) not available
# qplot(log(eno), data=maacs)
# qplot(log(eno), data=maacs, fill = mopos)
# qplot(log(eno), data=maacs, geom = "density")
# qplot(log(eno), data=maacs, geom = "density", color = mopos)
# qplot(log(pm25),log(eno), data=maacs)
# qplot(log(pm25),log(eno), data=maacs, shape = mopos)
# qplot(log(pm25), log(eno), data=maacs, color = mopos)
# qplot(log(pm25), log(eno), data=maacs, color = mopos, geom = c("point","smooth"),method="lm")
# qplot(log(pm25), log(eno), data=maacs, geom = c("point","smooth"),method="lm",factes=.~mopo)
# tricky to modify... customization
# qplot(logpm25, NocturnalSympt, data=maacs, geom = c("point","smooth"),method="lm",factes=.~bmicat)
# data frame,
# aesthetic mapping : how data are mapped (color size)
# geoms : points, lines , shapes
# facets : for conditional plots
# stats : stat transformation
# scales
# coord syst
# str(maacs) not available
# qplot(log(eno), data=maacs)
# qplot(log(eno), data=maacs, fill = mopos)
# qplot(log(eno), data=maacs, geom = "density")
# qplot(log(eno), data=maacs, geom = "density", color = mopos)
# qplot(log(pm25),log(eno), data=maacs)
# qplot(log(pm25),log(eno), data=maacs, shape = mopos)
# qplot(log(pm25), log(eno), data=maacs, color = mopos)
# qplot(log(pm25), log(eno), data=maacs, color = mopos, geom = c("point","smooth"),method="lm")
# qplot(log(pm25), log(eno), data=maacs, geom = c("point","smooth"),method="lm",factes=.~mopo)
# tricky to modify... customization
# qplot(logpm25, NocturnalSympt, data=maacs, geom = c("point","smooth"),method="lm",factes=.~bmicat)
# data frame,
# aesthetic mapping : how data are mapped (color size)
# geoms : points, lines , shapes
# facets : for conditional plots
# stats : stat transformation
# scales
# coord syst
# Piece by piece,,, unlike lattice
# in layers : data, overlay a summary, metadata and annotation
# g <- ggplot(maacs, aes(logpm25, Noct...))
# print(g)
# summary(g) ggplot objects
str(mpg)
summary(mpg)
g <- ggplot(mpg, aes(displ,hwy))
print(g) # pas assez d'info...
# str(maacs) not available
# qplot(log(eno), data=maacs)
# qplot(log(eno), data=maacs, fill = mopos)
# qplot(log(eno), data=maacs, geom = "density")
# qplot(log(eno), data=maacs, geom = "density", color = mopos)
# qplot(log(pm25),log(eno), data=maacs)
# qplot(log(pm25),log(eno), data=maacs, shape = mopos)
# qplot(log(pm25), log(eno), data=maacs, color = mopos)
# qplot(log(pm25), log(eno), data=maacs, color = mopos, geom = c("point","smooth"),method="lm")
# qplot(log(pm25), log(eno), data=maacs, geom = c("point","smooth"),method="lm",factes=.~mopo)
# tricky to modify... customization
# qplot(logpm25, NocturnalSympt, data=maacs, geom = c("point","smooth"),method="lm",factes=.~bmicat)
# data frame,
# aesthetic mapping : how data are mapped (color size)
# geoms : points, lines , shapes
# facets : for conditional plots
# stats : stat transformation
# scales
# coord syst
# Piece by piece,,, unlike lattice
# in layers : data, overlay a summary, metadata and annotation
# g <- ggplot(maacs, aes(logpm25, Noct...))
# print(g)
# summary(g) ggplot objects
str(mpg)
summary(mpg)
g <- ggplot(mpg, aes(displ,hwy))
print(g) # pas assez d'info...
p <- g + geom_point()
print(p)
g+geom_point()
g + geom_point() + geom_smooth()
g + geom_point() + geom_smooth(method = "lm")
g + geom_point() + facet_grid(.~drv) + geom_smooth(method = "lm")
xlab("aaa")
ylab()
labs()
ggtitle()
theme()
# two standard theme
theme_gray()
themebw()
g + geom_point(color ="steelblue",size =4, alpha = 1/2) # aplpha tranparency
g + geom_point(aes(color =drv),size =4, alpha = 1/2)
g + geom_point(aes(color =drv, size =cyl), alpha = 1/2)
g + geom_point(aes(color =drv),size =4, alpha = 1/2) + labs(title = "TITRE") + labs(x = expression("log "*PM[222]), y = "titre axe y")
g + geom_point(aes(color =drv),size =4, alpha = 1/2) + labs(title = "TITRE") + labs(title = "ZATRExxx")+ labs(x = expression("log "*PM), y = "titre axe y")
g + geom_point(aes(color =drv, size =cyl), alpha = 1/2) + geom_smooth(size = 4, linetype = 3, method = "lm", se = FALSE)
g + geom_point(aes(color =drv), size =4, alpha = 1/2) + geom_smooth(size = 4, linetype = 3, method = "lm", se = FALSE)
g + geom_point(aes(color =drv), size =4, alpha = 1/2) + geom_smooth(size = 2, linetype = 3, method = "lm", se = FALSE)
g + geom_point(aes(color =drv), size =4, alpha = 1/2) + geom_smooth(size = 2, linetype = 2, method = "lm", se = FALSE)
g + geom_point(aes(color =drv, size =cyl), alpha = 1/2) + geom_smooth(size = 2, linetype = 2, method = "lm", se = FALSE)
# Change the overall theme
g + geom_point(aes(color =drv))+ theme_bw(base_family = "Times")
testdata <- data.frame(x = 1:100, y=rnorm(100))
testdata[50,2] <- 100 ## outlier
plot(testdata$x,testdata$y, type = "l")
plot(testdata$x,testdata$y, type = "l", ylim = c(-3,3))
g <- ggplot(testdata, aes(x = x, y = y))
g + geom_line()
g + geom_line() + ylim(-3,3) # les donnees en dehors sont sorties... subset
g + geom_line() + coord_cartesian(ylim = c(-3,3)) # idem plot
# cut() decoupe une variable continuue ne categories
## Calculate the deciles
cutpoints <- quantile(mpg$cty, seq(0,1, length = 4), na.rm = TRUE)
cutpoints
## cut the data
mpg$cty2 <- cut(mpg$cty, cutpoints)
testdata <- data.frame(x = 1:100, y=rnorm(100))
testdata[50,2] <- 100 ## outlier
plot(testdata$x,testdata$y, type = "l")
plot(testdata$x,testdata$y, type = "l", ylim = c(-3,3))
g <- ggplot(testdata, aes(x = x, y = y))
g + geom_line()
g + geom_line() + ylim(-3,3) # les donnees en dehors sont sorties... subset
g + geom_line() + coord_cartesian(ylim = c(-3,3)) # idem plot
# cut() decoupe une variable continuue ne categories
## Calculate the deciles
cutpoints <- quantile(mpg$cty, seq(0,1, length = 4), na.rm = TRUE)
cutpoints
## cut the data
mpg$cty2 <- cut(mpg$cty, cutpoints)
str(mpg)
levels(mpg$cty2)
## Setup ggplot with data frame
g <- ggplot(mpg, aes(displ,hwy))
## Add layers
g + geom_point(alpha = 1/3)  + geom_smooth(method = "lm", se = FALSE, col="steelblue") + theme_bw(base_family = "Avenir", base_size = 10) +labs(x = expression("log " * PM[2.5])) +labs(y = "titre Y") +labs(title = "TITRE PRINCIPAL") + facet_wrap(cty2 ~ fl, nrow = 15, ncol = 3 )
cutpoints <- quantile(mpg$cty, seq(0,1, length = 4), na.rm = TRUE)
cutpoints
## cut the data
mpg$cty2 <- cut(mpg$cty, cutpoints)
str(mpg)
levels(mpg$cty2)
## Setup ggplot with data frame
g <- ggplot(mpg, aes(displ,hwy))
## Add layers
g <- ggplot(mpg, aes(displ,hwy))
## Add layers
g <- g + geom_point(alpha = 1/3)  + geom_smooth(method = "lm", se = FALSE, col="steelblue")
g
g<- g + theme_bw(base_family = "Avenir", base_size = 10) +labs(x = expression("log " * PM[2.5])) +labs(y = "titre Y") +labs(title = "TITRE PRINCIPAL") + facet_wrap(cty2 ~ fl, nrow = 15, ncol = 3 )
g
## Add layers
# g + geom_point(alpha = 1/3)  + geom_smooth(method = "lm", se = FALSE, col="steelblue") + theme_bw(base_family = "Avenir", base_size = 10) +labs(x = expression("log " * PM[2.5])) +labs(y = "titre Y") +labs(title = "TITRE PRINCIPAL") + facet_wrap(cty2 ~ fl, nrow = 15, ncol = 3 )
g <- g + geom_point(alpha = 1/3)  + geom_smooth(method = "lm", se = FALSE, col="steelblue")
g<- g + theme_bw(base_family = "Avenir", base_size = 10) +labs(x = expression("log " * PM[2.5])) +labs(y = "titre Y") +labs(title = "TITRE PRINCIPAL")
g <- g + facet_wrap(cty2 ~ fl, nrow = 15, ncol = 3 )
g
# ----------------------------------------------------------
# Week 2 : Quizz
# ----------------------------------------------------------
# ----------------------------------------------------------
library(lattice)
library(datasets)
class(xyplot(Ozone ~ Wind, data = airquality))
o <- xyplot(Ozone ~ Wind, data = airquality)
print(o)
xyplot(Ozone ~ Wind, data = airquality)
# ----------------------------------------------------------
# 2 What is produced by the following code?
# library(nlme)
# library(lattice)
# xyplot(weight ~ Time | Diet, BodyWeight)
# ----------------------------------------------------------
library(nlme)
library(lattice)
str(BodyWeight)
xyplot(weight ~ Time | Diet, BodyWeight)
?xyplot()
xyplot(weight ~ Time | Diet, BodyWeight, text("aaa"))
xyplot(weight ~ Time | Diet, BodyWeight, text("aaa"), panel = function(x,y,...) {
panel.xyplot(x,y,...)
panel.text("toto")
})
?xyplot
xyplot(weight ~ Time | Diet, BodyWeight, text("aaa"), panel = function(x,y,...) {
panel.xyplot(x,y,...)
panel.text(2,2,"toto")
})
xyplot(weight ~ Time | Diet, BodyWeight)
llines(1,  type = "l")
xyplot(weight ~ Time | Diet, BodyWeight)
llines(1,  type = "l")
xyplot(weight ~ Time | Diet, BodyWeight)
llines(10,  type = "l", col="red")
xyplot(weight ~ Time | Diet, BodyWeight, text("aaa"), panel = function(x,y,...) {
panel.xyplot(x,y,...)
panel.text(2,2,"toto")
})
panel.text(1,2,"toto")
xyplot(weight ~ Time | Diet, BodyWeight, text("aaa"), panel = function(x,y,...) {
panel.xyplot(x,y,...)
panel.text(1,2,"toto")
})
xyplot(weight ~ Time | Diet, BodyWeight, text("aaa"), panel = function(x,y,...) {
panel.xyplot(x,y,...)
panel.text(1,1,"toto")
})
