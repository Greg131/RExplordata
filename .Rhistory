install.packages("jsonlite")
library(jsonlite)
library(jsonlite)
fileUrl <- "https://api.github.com/users/Greg131/repos"
jsonData <- fromJSON(fileUrl)
install.packages("curl")
fileUrl <- "https://api.github.com/users/Greg131/repos"
jsonData <- fromJSON(fileUrl)
names(jsonData)
jsonData
class(jsonData)
View(jsonData)
names(jsonData$owner)
View(jsonData)
View(jsonData)
View(jsonData)
View(my_matrix)
View(my_matrix2)
View(my_vector)
names(jsonData)
names(jsonData)
jsonData$owner$login
myjson <- toJSON(iris, pretty=TRUE)
class(myjson)
cat(myjson)
fileUrl <- "https://api.github.com/users/Greg131/repos"
jsonData <- fromJSON(fileUrl)
names(jsonData)
jsonData
class(jsonData)
names(jsonData$owner)
jsonData$owner$login
myjson <- toJSON(iris, pretty=TRUE)
class(myjson)
cat(myjson)
iris2 <- fromJSON(myjson)
head(iris2)
install.packages("data.table")
library(data.table)
DF = data.frame(x=rnorm(9), y=rep(c("a","b","c"), each=3), z=rnorm(9))
head(DFD,3)
head(DF,3)
DF
DT = data.table(x=rnorm(9), y=rep(c("a","b","c"), each=3), z=rnorm(9))
head(DT,3)
DT
class(DT)
tables()
DT[2,]
DT[DT$y="a",]
DT[DT$y=="a",]
DT[c(2,3)]  # un peu diff de DF... deux lignes (au lieu de col)
DF[c(2,3)]  #
DT[,c(2,3)]
{
x=1
y=2
}
k = {print(10); 5}
print(k)
DT[,list(mean(x),sum(z))]
DT[,table(y)]
setwd("~/Dropbox/Datascience/Universite_Johns-Hopkins/Exploration_analytique_de_donnees/RExplordata")
getwd() # Get working directory
if (!file.exists("../data"))       {
dir.create("../data")
}
pollution <- read.csv("../data/avgpm25.csv", colClasses = c("numeric","character","factor",
"numeric","numeric"))
setwd(""/Users/GA/dropbox/Datascience/Universite_Johns-Hopkins/Exploration_analytique_de_donnees/RExplordata"")
getwd() # Get working directory
if (!file.exists("../data"))       {
dir.create("../data")
}
pollution <- read.csv("../data/avgpm25.csv", colClasses = c("numeric","character","factor",
"numeric","numeric"))
View(pollution)
# ----------------------------------------------------------
# R Exploratory Data Analysis
# ----------------------------------------------------------
setwd(""/Users/GA/dropbox/Datascience/Universite_Johns-Hopkins/Exploration_analytique_de_donnees/RExplordata"")
getwd() # Get working directory
if (!file.exists("../data"))       {
dir.create("../data")
}
pollution <- read.csv("../data/avgpm25.csv", colClasses = c("numeric","character","factor",
"numeric","numeric"))
head(pollution)
# ----------------------------------------------------------
# Simple Summaries of the dada
# 1 dim : summary, boxplot, histogram, barplot
# 2 dim : multiple/overlayed 1-D plots, Scaterplots
# >2 dim : multiple/overlayed 2-D plots, add Color, size , shape
#         spinning plots, 3-D plots
# ---------------------------------------------------------
# ---------------------------------------------------------
# 1 Dimension
# ---------------------------------------------------------
# 5 Number summary (min, max, median, 1st qu, 3rd qu). R add mean
summary(pollution$pm25)
# Boxplot
boxplot(pollution$pm25, col = "blue")
# Histogram
hist(pollution$pm25, col = "green")
rug(pollution$pm25) # plot all the points
hist(pollution$pm25, col = "green", breaks = 100)
# Pas trop petit pour voir la courbe de distrib
# Pas trop grand sinon bruit sur la courbe
rug(pollution$pm25) # plot all the points
# Boxplot
boxplot(pollution$pm25, col = "blue")
abline(h=12)
# Histogram
hist(pollution$pm25, col = "green")
rug(pollution$pm25) # plot all the points
abline(v=12, lwd =2)
abline(v=median(pollution$pm25), col = "magenta" ,lwd =4)
# Barplot
class(pollution$region)
table(pollution$region) # to summarize categorical variable
barplot(table(pollution$region), col = "wheat", main = "Number of countries in each region")
# ---------------------------------------------------------
# 2 Dimension
# ---------------------------------------------------------
# Multiple Boxplot
boxplot(pm25 ~ region, data = pollution , col = "red") # region categorical
# Multiple Histogram
par(mfrow = c(2,1), mar = c(4,4,2,1)) # ??? comment initialiser
hist(subset(pollution, region == "east")$pm25, col = "green")
hist(subset(pollution, region == "west")$pm25, col = "green")
# Scatterplot
with(pollution, plot(latitude, pm25))
abline(h=12, lwd =2, lty = 2)
with(pollution, plot(longitude, pm25))
abline(h=12, lwd =2, lty = 2)
with(pollution, plot(latitude, pm25, col = region))
abline(h=12, lwd =2, lty = 2)
# Multiple Scatterplots
par(mfrow = c(1,2), mar = c(5,4,2,1)) # ??? comment initialiser
with(subset(pollution, region == "west"), plot(latitude, pm25, main = "West"))
with(subset(pollution, region == "east"), plot(latitude, pm25, main = "East"))
# R Graph Gallery : http://rgraphgallery.blogspot.com.es
# R bloggers : http://www.r-bloggers.com
# ---------------------------------------------------------
# Plotting Systems in R
# ---------------------------------------------------------
# 1 - Base plotting system : "artist's pqlette" model
# Functions to generate the plot ... and f to annotate the plot
# ! can't go back
par(mfrow = c(1,1))
library(datasets)
data(cars)
with(cars, plot(speed,dist))
# 2 - The Lattice System : Entire plot sprcified by 1 funct; conditioning
# Plots created with a single function
# Plots created with a single function call (xyplot, bwplot, ...)
# + conditioning , - difficult to anotate, ...
library(lattice)
state <- data.frame(state.x77, region = state.region)
xyplot(Life.Exp ~ Income | region, data = state, layout = c(4,1))
# 3 - The ggplot2 : Mixes elements of Base and Lattice
library(ggplot2)
data(mpg)
qplot(displ, hwy, data = mpg)
# ---------------------------------------------------------
# Base Plotting Systems in R
# ---------------------------------------------------------
# Screen, fiule?
# How yhe plot will be used ? tmp screen, web, paper, pres
# resize dynamically? vector format vs bitmap format
# Quel system ? : base, lattice, ggplot2 (ne peuvent pas ??tre m??lang??s)
# Base : 2 D, 2 phases: initialize, Annotating
# plot(x,y), hist(x) ... launch graph device... draw in that device
library(datasets)
hist(airquality$Ozone)
with(airquality, plot(Wind, Ozone))
airquality <- transform(airquality, Month = factor(Month))
boxplot(Ozone ~ Month, airquality, xlab = "Month", ylab = "Ozone (ppb)" )
# pch : plotting symbol (default open circle)
# lty : line type  (default solid)
# lwd : line width specified as an interger multiple
# col : color spec as a number , string, or hex code; colors() gives a vector of clolors by names
colors()
# xlab : character string for x-axis
# ylab : character string for y-axis
# par() function is used to specify global graphics param that affect all plots in a R session
# can be overridden for a spec graph with spec function call...
# las : orientation of axis label
# bg :  background color
# mar : margin size
# oma : outer margin size
# mfrow: number of plots per row, column (plots are filled row-wise)
# cfrow: number of plots per row, column (plots are filled column-wise)
# See default values :
par("lty")
par("col")
par("pch")
par("lwd")
par("xlab")
par("las")
par("bg")
par("mar")  # bottom left top righ
par("oma")
par("mfrow")
par("cfrow")
# Base Plotting Functions :
# plot(),
# lines() vector x vector y connects dots
# points(),
# text(), pos x,y
# title(),
# mtext(),
# axis()
library(datasets)
with(airquality, plot(Wind, Ozone))
title(main = "Ozone and Wind in New York City")
with(subset(airquality, Month == 5), points(Wind, Ozone, col = "blue"))
with(airquality, plot(Wind, Ozone, main = "Ozone and Wind ....NY", type = "n")) # set up sans plotter
with(subset(airquality, Month == 5), points(Wind, Ozone, col = "blue"))
with(subset(airquality, Month != 5), points(Wind, Ozone, col = "red"))
legend("topright", pch = 1, col = c("blue","red"), legend = c("May","Other months"))
with(airquality, plot(Wind, Ozone, main = "Ozone and Wind in NY", pch = 20))
model <- lm(Ozone ~ Wind, airquality)
abline(model, lwd = 2)
par(mfrow = c(1,2))
with(airquality, {
plot(Wind, Ozone, main = "Ozone and Wind")
plot(Solar.R, Ozone, main = "Ozone and sollar radiation")
})
par(mfrow = c(1,3), mar = c(4,4,2,1), oma = c(0,0,2,0))
with(airquality, {
plot(Wind, Ozone, main = "Ozone and Wind")
plot(Solar.R, Ozone, main = "Ozone and sollar radiation")
plot(Temp, Ozone, main = "Ozone and Temp")
mtext("xxx in NY", outer = TRUE)
})
# Demonstration
par(mfrow = c(1,1))
x <- rnorm(100)
hist(x)
y <- rnorm(100)
plot(x,y)
par("mar")
par(mar = c(2,2,0,0))
plot(x,y)
par(mar = c(5,4,2,2))
plot(x,y)
plot(x,y, pch = 20)
plot(x,y, pch = 19)
plot(x,y, pch = 2)
plot(x,y, pch = 3)
plot(x,y, pch = 4)
# Appendre les param :
example(points)
y <- rnorm(100)
plot(x,y, pch = 24, col = "red", bg = "blue") # Boundary and fill param col & bg
x <- rnorm(100)
y <- rnorm(100)
plot(x,y, pch = 24, col = "red", bg = "blue") # Boundary and fill param col & bg
title("Scatterplot")
text(-2,-2, "label")
legend("topleft", legend = "DATA")
legend("topleft", legend = "DATA", pch = 20)
fit <- lm(y ~ x )
abline(fit)
abline(fit, lwd = 3)
abline(fit, lwd = 3, col = "blue")
plot(x, y, xlab = "Weight", ylab = "Height", main = "TITRE", pch =20)
legend("topright", legend = "DATA LEGEND", pch = 20)
fit <- lm(y ~ x )
abline(fit, lwd = 3, col = "red")
z <- rpois(100,2)
par(mfrow = c(2,1))
plot(x,y,pch = 20)
plot(x,z ,pch = 19)
par("mar")
par(mar = c(2,2,1,1))
plot(x,y,pch = 20)
plot(x,z ,pch = 19)
par(mfrow = c(1,2))
plot(x,y,pch = 20)
plot(x,z ,pch = 19)
par(mfrow = c(2,3))
plot(x,y,pch = 20)
plot(x,z ,pch = 19)
plot(x,z ,pch = 14)
plot(x,z ,pch = 1)
plot(x,z ,pch = 17)
plot(x,z ,pch = 12)
par(mfcol = c(2,3)) # change l'ordre d'affichage par col...
plot(x,y,pch = 20)
plot(x,z ,pch = 19)
plot(x,z ,pch = 14)
plot(x,z ,pch = 1)
plot(x,z ,pch = 17)
plot(x,z ,pch = 12)
# Points
par(mfcol = c(1,1))
x <- rnorm(100)
y <- x + rnorm(100)
g <- gl(2,50)
g <- gl(2,50, labels = c("Male","Female"))
g
str(g)
plot(x,y)
plot(x,y, type = "n")
points(x[g == "Male"], y[g == "Male"], col = "green")
points(x[g == "Female"], y[g=="Female"], col = "blue", pch = 19)
# ----------------------------------------------------------
# Graphics Devices in R
# ----------------------------------------------------------
# Window
# PDF file, PNG or JPEG file
# SVG
# on Mac quartz()
?Devices
library(datasets)
with(faithful, plot(eruptions, waiting))
title(main = " Old xxxxx")
pdf(file = "myplot.pdf")  ## Open PDF device; create myplot.pdf in wd
with(faithful, plot(eruptions, waiting))
title(main = " Old xxxxx")
dev.off() ## Close the PDF file devioce
png(file = "myplot.png")  ## Open PDF device; create myplot.pdf in wd
with(faithful, plot(eruptions, waiting))
title(main = " Old xxxxx")
dev.off() ## Close the png file devioce
# Vector formats:
# pdf
# svg
# win.metafile
# postscript
# Bitmapformat
# png : portable network graphics
# jpeg : goog for photo, natural scenes
# tiff
# bmp
# Multiple Open Graphics Devices
dev.cur()
quartz()
dev.cur() # active device
# dev.set(<interger>) >2..
quartz()
quartz()
quartz()
quartz()
i<- dev.cur()
i
dev.set(6)
with(faithful, plot(eruptions, waiting))
title(main = " Old xx6xxx")
dev.set(3)
with(faithful, plot(eruptions, waiting))
title(main = " Old xxx3xx")
dev.set(6)
dev.off()
dev.set(4)
with(faithful, plot(eruptions, waiting))
title(main = " Old xx4xx4x")
# Copying Plots
# dev.copy
# dev.copy2pdf copy a plot to a PDF file
library(datasets)
with(faithful, plot(eruptions, waiting))
title(main = " Old xxxxx")
dev.copy(png, file = "graph.png")
dev.off()
